tosca_definitions_version: cloudify_dsl_1_3
imports:
  - 'http://www.getcloudify.org/spec/cloudify/4.0/types.yaml'
  - 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml'
  - 'http://www.getcloudify.org/spec/fabric-plugin/1.3/plugin.yaml'


plugins: {}
node_types: {}

dsl_definitions:
  cloudify_agent_info_aws: &cloudify_agent_info_aws
    user: ec2-user
    key: /home/ec2-user/work/shay-cloudify.pem

  cloudify_agent_info_os: &cloudify_agent_info_os
    user: centos
    key: /home/ec2-user/work/shay-cloudify-os.pem


  fabric_env_info: &fabric_env_info
    host_string: 185.98.151.92
    user: centos
    key_filename: /home/ec2-user/work/shay-cloudify-os.pem

inputs:
  Compute-WebServer-IP:
    type: string
    default: "185.98.151.92"
  Compute-APP-Server-IP:
    type: string
    default: "10.8.0.18"
  Compute-LB-IP:
    type: string
    default: "10.8.0.18"
  Compute-DB-IP:
    type: string
    default: "10.8.0.18"
  WEB_SERVER_PORT:
    default: "6000"
node_templates:
  VM-WebServer-Cloud-B:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-WebServer-IP }
      agent_config:
        install_method: none
      cloudify_agent: *cloudify_agent_info_os

    relationships:
      - type: cloudify.relationships.connected_to
        target: VM-APP-Server-Cloud-A
  VM-APP-Server-Cloud-A:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-APP-Server-IP }
      cloudify_agent: *cloudify_agent_info_aws
    relationships:
      - type: cloudify.relationships.connected_to
        target: VM-DB-Cloud-A
  VM-DB-Cloud-A:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-DB-IP }
      cloudify_agent: *cloudify_agent_info_aws
    relationships: []
  VM-LB-Cloud-A:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-LB-IP }
      cloudify_agent: *cloudify_agent_info_aws
    relationships:
      - type: cloudify.relationships.connected_to
        target: VM-WebServer-Cloud-B
  APPServer-JBoss:
    type: cloudify.nodes.ApplicationServer
    instances:
      deploy: 1
    properties:
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM-APP-Server-Cloud-A
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureAPPServer.sh
        start: scripts/startAPPServer.sh
        stop: scripts/stopAPPServer.sh
  WebServer-Tomcat:
    type: cloudify.nodes.WebServer
    instances:
      deploy: 1
    properties:
      port:  { get_input: WEB_SERVER_PORT }
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM-WebServer-Cloud-B   
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/test_script.sh
#            script_path: scripts/configureWebServer.sh
            fabric_env: *fabric_env_info
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/test_script.sh
#            script_path: scripts/startWebServer.sh
            fabric_env: *fabric_env_info
        stop: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/test_script.sh
#            script_path: scripts/stopWebServer.sh
            fabric_env: *fabric_env_info

  DBMS:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM-DB-Cloud-A 
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureDB.sh
        start: scripts/startDB.sh
        stop: scripts/stopDB.sh
  LoadBalancer:
    type: cloudify.nodes.LoadBalancer
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM-LB-Cloud-A 
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: scripts/configureLB.sh
        start: scripts/startLB.sh
        stop: scripts/stopLB.sh
relationships: {}
